---
# tasks file for ansible_galaxy_role_kerberos

- name: "Kerberos | Add host to /etc/hosts"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.blockinfile:
    path: /etc/hosts
    block: "{{ item.ip_address_for_etc_hosts }} {{ item.fqdn }} {{ item.host_name }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.label }}"
  loop: "{{ kerberos.servers | flatten(1) }}"

- name: "Kerberos | Install required packages"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.apt:
    pkg:
      - debconf
      - debconf-utils
      - expect
    state: present
    update_cache: yes
  tags:
    - packages

- name: "Kerberos | Create a directory for log files"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.file:
    path: /var/log/kerberos
    state: directory
    mode: "755"

- name: "Kerberos | Copy logrotate config file"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.copy:
    src: logrotate-kerberos
    dest: /etc/logrotate.d/kerberos
    owner: root
    mode: "644"

- name: "Kerberos | Check whether Kerberos packages are installed"
  become: true
  ignore_errors: true
  ansible.builtin.command: dpkg -l | grep -E "krb5-(admin-server|kdc)"
  register: kerberos_installed

- block:
    - name: "Kerberos | Copy an expect script to install Kerberos packages"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.copy:
        src: install_kerberos_packages.exp
        dest: /tmp
        owner: root
        mode: "775"

    - name: "Kerberos | Execute an expect script to install Kerberos packages"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.shell:
        cmd: |
          export MY_KERBEROS_DEFAULT_REALM="{{ kerberos.kdc_realm }}"
          export MY_KERBEROS_SERVERS="{{ kerberos.servers | map(attribute='fqdn') | join(' ') }}"
          export MY_KERBEROS_ADMIN_SERVER="{{ kerberos.servers | selectattr('is_primary', 'true') | map(attribute='fqdn') | first }}"
          ./install_kerberos_packages.exp
          unset KDC_MY_REALM
          unset MY_KERBEROS_SERVERS
          unset MY_KERBEROS_ADMIN_SERVER
        chdir: /tmp

  when: kerberos_installed.rc != 0

- name: "Kerberos | Replace kdc.conf"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.template:
    src: kdc.conf.j2
    dest: /etc/krb5kdc/kdc.conf
    owner: root
    group: root
    mode: "644"

- name: "Kerberos | Check the Kerberos database"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.stat:
    path: /var/lib/krb5kdc/principal
  register: kerberos_database_path

- block:
    - name: "Kerberos | Copy an expect script to create KDC database"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.copy:
        src: create_kdc_database.exp
        dest: /tmp
        owner: root
        mode: "775"

    - name: "Kerberos | Execute an expect script to create KDC database"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.shell:
        cmd: |
          export KDC_MY_REALM="{{ kerberos.kdc_realm }}"
          export KDC_MASTER_PASSWORD="{{ kerberos.kdc_master_password }}"
          ./create_kdc_database.exp
          unset KDC_MY_REALM
          unset KDC_MASTER_PASSWORD
        chdir: /tmp

  when: (not kerberos_database_path.stat.exists)

- name: "Kerberos | Add administrators to the ACL file"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.copy:
    src: kadm5.acl
    dest: /etc/krb5kdc
    mode: "644"

- name: "Kerberos | Copy an expect script to add administrators to the Kerberos database"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.copy:
    src: add_admin_to_kerberos_database.exp
    dest: /tmp
    owner: root
    mode: "775"

- name: "Kerberos | Execute an expect script to add administrators to the Kerberos database"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.shell:
    cmd: |
      export MY_KERBEROS_ADMIN_PRINCIPAL="{{ kerberos.admin_principal }}@{{ kerberos.kdc_realm }}"
      export MY_KERBEROS_ADMIN_PASSWORD="{{ kerberos.admin_password }}"
      ./add_admin_to_kerberos_database.exp
      unset MY_KERBEROS_ADMIN_PRINCIPAL
      unset MY_KERBEROS_ADMIN_PASSWORD
    chdir: /tmp

- name: "Kerberos | Start the Kerberos daemons on the primary KDC"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.systemd_service:
    state: started
    enabled: true
    name: "{{ item }}"
  with_items:
    - krb5-kdc
    - krb5-admin-server

- block:
    - name: "Kerberos | Copy an expect script to create host keytabs for replica KDCs"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.copy:
        src: create_host_keytabs_for_replica_kdcs.exp
        dest: /tmp
        owner: root
        mode: "775"

    - name: "Kerberos | Execute an expect script to create host keytabs for replica KDCs"
      become: true
      ignore_errors: "{{ ansible_check_mode }}"
      ansible.builtin.shell:
        cmd: |
          export KDC_MY_REALM="{{ kerberos.kdc_realm }}"
          export MY_KERBEROS_ADMIN_PRINCIPAL="{{ kerberos.admin_principal }}"
          export MY_KERBEROS_ADMIN_PASSWORD="{{ kerberos.admin_password }}"
          export MY_KERBEROS_SERVER_FQDN="{{ item }}"

          ./create_host_keytabs_for_replica_kdcs.exp

          unset KDC_MY_REALM
          unset MY_KERBEROS_ADMIN_PRINCIPAL
          unset MY_KERBEROS_ADMIN_PASSWORD
          unset MY_KERBEROS_SERVER_FQDN
        chdir: /tmp
      loop: "{{ kerberos.servers | map(attribute='fqdn') | flatten(1) }}"

  when: "'kerberos-primary' in group_names"

- name: "Kerberos | Copy an expect script to extract host random keys from replica KDCs"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.copy:
    src: extract_host_random_keys_from_replica_kdcs.exp
    dest: /tmp
    owner: root
    mode: "775"

- name: "Kerberos | Execute an expect script to extract host random keys from replica KDCs"
  become: true
  ignore_errors: "{{ ansible_check_mode }}"
  ansible.builtin.shell:
    cmd: |
      export KDC_MY_REALM="{{ kerberos.kdc_realm }}"
      export MY_KERBEROS_ADMIN_PRINCIPAL="{{ kerberos.admin_principal }}"
      export MY_KERBEROS_ADMIN_PASSWORD="{{ kerberos.admin_password }}"
      export MY_KERBEROS_SERVER_FQDN="{{ fqdn }}"

      ./extract_host_random_keys_from_replica_kdcs.exp

      unset KDC_MY_REALM
      unset MY_KERBEROS_ADMIN_PRINCIPAL
      unset MY_KERBEROS_ADMIN_PASSWORD
      unset MY_KERBEROS_SERVER_FQDN
    chdir: /tmp
